/**
* A CPU Emulator
*
* @author William Jeff Lett
* @author Kevin DeBrito
*/



public class CPU {	

	/** VARIABLES */
	
	/** Program Counter */
	private static int pc;
	
	/** Registers */
	private static int[] registers;
	
	/** Status of the CPU */
	private static Driver.Status status;
	
	/** Setters */
	
	public static void setPc(int p) { pc=p; }
	public static void setRegisters(int[] r) { registers=r; }
	public static void setStatus(Driver.Status s) { status=s; }
	
	/** Getters */
	
	public static int getPc() { return pc; }
	public static int[] getRegisters() { return registers; }
	public static Driver.Status getStatus() { return status; }
	
	/**
	* Constructor for CPU
	*/
	public CPU() {
		pc=0;
		status=Driver.Status.NEW;
		registers=new int[Driver.NUM_REGISTERS];
		for(int i=0;i<Driver.NUM_REGISTERS;++i)
			registers[i]=0;
	}

	
	/**
	* Returns the type from an instruction
	* @param s The instruction to get the type of
	* @return The type
	*/
	public static int getType(String s) {
		if(s==null || s=="")
			return 0;
		String type = s.substring(0,2);
		return Integer.parseInt(type,2);	
	}
	

	/** 
	* Returns the opcode from an instruction
	* @param S The instruction to get the opcode from
	* @return The opcode
	*/	
	public static int getOpCode(String s) {	
		if(s==null || s=="")
			return 0;
		String opCode = s.substring(2,8);
		return Integer.parseInt(opCode,2);
	}
	
	/**
	* Converts a hex string to a binary string
	* @param s Hex String to convert
	* @return The converted binary string
	*/
	public static String hexToBinary (String s) {
		if(s!=null && s!="") {
			String ret = Long.toBinaryString(Long.parseLong(s,16));	
			//System.out.println("length:"+ret.length()+" ret:"+ret);	  
	  		for(int i=0+ret.length();i<32;++i)
	  			ret = "0"+ret;
			//System.out.println("length:"+ret.length()+" ret:"+ret);		
	  		return ret; 
		}	
		return "";
	}
	

	/** 
	* Fetches the next instruction from disk till the RAM object works
	* 
	*/
	public static String fetch(Disk d) {		
		return d.read(pc);
	}
	
	/** 
	* Fetches the next instruction from RAM
	* @param r The ram to read from 
	*/
	public static String fetch(RAM r) {
		return r.read(pc);	
	}
	
	/**
	* Decodes an instruction from hex to binary
	* @param s The instruction to convert
	* @return The converted binary instruction
	*/
	public static String decode(String s) {
		return hexToBinary(s);
	}
	
	/**
	* Splits an arithmetic instruction into a readable string for debugging
	* @param s The instruction to be converted
	*/
	public static String arithString(String s) {
		return getType(s)+"|"+getOpCode(s)+"|"+getArithSReg1(s)+"|"+getArithSReg2(s)+"|"+getArithDReg(s)+"|"+s.substring(20,32);
	}	
	
	/**
	* Splits a conditional instruction into a readable string for debugging
	* @param s The instruction to be converted
	*/
	public static String condString(String s) {
		return getType(s)+"|"+getOpCode(s)+"|"+getCondBReg(s)+"|"+getCondDReg(s)+"|"+getCondAddress(s);	
	}
	
	/** 
	* Splits an unconditional instruction into a readable string for debugging
	* @param s The instruction to be converted
	*/
	public static String uncondString(String s) {
		return getType(s)+"|"+getOpCode(s)+"|"+getUncondAddress(s);
	}	
	
	/**
	* Splits an input / output instruction into a readable string for debugging
	* @param s The instruction to be converted
	*/
	public static String inAndOutString(String s) {
		return condString(s);	
	}
	
	
	/**
	* Gets the SReg1 from an arithmetic instruction
	* @param s The arithmetic instruction to get the SReg1 from
	* @return The SReg1
	*/
	public static String getArithSReg1(String s) {
		return s.substring(8,12);
	} 

	/**
	* Gets the SReg2 from an arithmetic instruction
	* @param s The arithmetic instruction to get the SReg2 from
	* @return The SReg2
	*/
	public static String getArithSReg2(String s) {
		return s.substring(12,16);
	} 

	/**
	* Gets the DReg from an arithmetic instruction
	* @param s The arithmetic instruction to get the SReg from
	* @return The SReg2
	*/
	public static String getArithDReg(String s) {
		return s.substring(16,20);
	} 

	/**
	* Gets the BReg from a conditional branch instruction
	* @param s The conditional instruction to get the BReg from
	* @return The BReg
	*/
	public static String getCondBReg(String s) {
		return s.substring(8,12);	
	}

	/**
	* Gets the DReg from a conditional branch instruction
	* @param s The conditional instruction to get the DReg from
	* @return The DReg
	*/
	public static String getCondDReg(String s) {
		return s.substring(12,16);	
	}

/**
	* Gets the address from a conditional branch instruction
	* @param s The conditional instruction to get the address from
	* @return The address
	*/
	public static String getCondAddress(String s) {
		return s.substring(16,32);	
	}
	
	/**
	* Gets the address from an unconditional branch instruction
	* @param s The unconditional instruction to get the address from
	* @return The address
	*/
	public static String getUncondAddress(String s) {
		return s.substring(8,32);	
	}

		
	/**
	* Performs arithmetic instructions
	*/
	public static void arithmetic(String s) {
		int sReg1=Integer.parseInt(getCondBReg(s),2),sReg2=Integer.parseInt(getCondDReg(s),2),dReg=Integer.parseInt(getCondDReg(s),2);
		if(Driver.DEBUG)
			System.out.println("s="+s+" sReg1="+sReg1+" sReg2="+sReg2+" dReg:"+dReg);
		if(s!="") {
			if(getOpCode(s)==4)
				System.out.println("MOV");		
			else if(getOpCode(s)==5)
				System.out.println("ADD");		
			else if(getOpCode(s)==6)
				System.out.println("SUB");		
			else if(getOpCode(s)==7)
				System.out.println("MUL");		
			else if(getOpCode(s)==8)
				System.out.println("DIV");		
			else if(getOpCode(s)==9)
				System.out.println("AND");		
			else if(getOpCode(s)==10)
				System.out.println("OR");		
			else if(getOpCode(s)==16)
				System.out.println("SLT");		
			else
				System.out.println("Missed:"+arithString(s)+" opCode:"+getOpCode(s));
		}
	}
	
	public static void conditional(String s) {
		int sReg1=Integer.parseInt(getCondBReg(s),2),sReg2=Integer.parseInt(getCondDReg(s),2),address=Integer.parseInt(getCondAddress(s),2);
		if(Driver.DEBUG)
			System.out.println("s="+s+" sReg1="+sReg1+" sReg2="+sReg2+" address:"+address);
		
		if(getOpCode(s)==2)
			System.out.println("ST");
		else if(getOpCode(s)==3)
			System.out.println("LW");				
		else if(getOpCode(s)==11)
			System.out.println("MOVI");
		else if(getOpCode(s)==12)
			System.out.println("ADDI");
		else if(getOpCode(s)==13)
			System.out.println("MULI");
		else if(getOpCode(s)==14)
			System.out.println("DIVI");
		else if(getOpCode(s)==15)
			System.out.println("LDI");				
		else if(getOpCode(s)==17)
			System.out.println("SLTI");
		else if(getOpCode(s)==21)
			System.out.println("BEQ");
		else if(getOpCode(s)==22)
			System.out.println("BNE");
		else if(getOpCode(s)==23)
			System.out.println("BEZ");				
		else if(getOpCode(s)==24)
			System.out.println("BNZ");
		else if(getOpCode(s)==25)
			System.out.println("BGZ");
		else if(getOpCode(s)==26)
			System.out.println("BLZ");
		else
			System.out.println("Missed:"+arithString(s)+" opCode:"+getOpCode(s));			
	}
	
	public static void unconditional(String s) {
		int address = Integer.parseInt(getUncondAddress(s),2);
		if(Driver.DEBUG)
			System.out.println("s="+s+" address:"+address);
		if(getOpCode(s)==18)
			System.out.println("HLT");
		else if(getOpCode(s)==20)
			System.out.println("JMP");
		else
			System.out.println("Missed:"+arithString(s)+" opCode:"+getOpCode(s));			
	}
	
	public static void inputAndOutput(String s) {
<<<<<<< .mine
		if(getOpCode(s)==0) {
			if(Driver.DEBUG) {
				System.out.println("Read Instruction:"+inAndOutString(s));
				System.out.println("address:"+Integer.parseInt(s
					
			}
		}
=======
		int sReg1=Integer.parseInt(getCondBReg(s),2),sReg2=Integer.parseInt(getCondDReg(s),2),address=Integer.parseInt(getCondAddress(s),2);
		if(Driver.DEBUG)
			System.out.println("s="+s+" sReg1="+sReg1+" sReg2="+sReg2+" address:"+address);
		if(getOpCode(s)==0) {	
			if(sReg2!=0 && address !=0) //error, one should be zero.
				System.out.println("RD error, s="+s);
			else {
				System.out.println("RD");        
		}
>>>>>>> .r25
		else if(getOpCode(s)==1)
			System.out.println("WR");
		else
			System.out.println("Missed:"+arithString(s)+" opCode:"+getOpCode(s));					
	}	

	
	/** 
	* Execute a decoded instruction
	* @param s A decoded instruction string
	*/	
	public static void execute(String s) {
			//System.out.println("opCode:"+getOpCode(s)+" s:"+s);
						
			switch(getType(s)) {
				case 0: 	//System.out.println("Do Arithmetic! with opCode:"+getOpCode(s)+" "+arithString(s));		
							arithmetic(s);											
							++pc;
							break;
				case 1:	//System.out.println("Do Condition Branch and Immediate! opCode:"+getOpCode(s)+" "+condString(s));
							conditional(s);
							++pc;							
							break;
				case 2:	//System.out.println("Do Uncondition Jump opCode:"+getOpCode(s)+" "+uncondString(s));
							unconditional(s);							
							++pc;						
							break;
				case 3:	//System.out.println("Do Input and Output Instruction opCode:"+getOpCode(s)+" "+inAndOutString(s));
							inputAndOutput(s);							
							++pc;						
							break;
			}
	}



}
/**
* Main Driver for the OS
*
* @author William Jeff Lett
* @author Kevin DeBrito
*/


public class Driver {	

	/* Constants */
	
	/** Jeff's Debugging variable.  Set to true for his debugging output. */
	public final static boolean DEBUG = true;
	
	/** Messages can be turned on or off here */
	public final static boolean MESSAGES = true;
	
	/** First input file */
	public final static String FILE_1_NAME = "./include/DataFile1.txt";
	
	/** Second input file */	
	public final static String FILE_2_NAME = "./include/DataFile2.txt";
	
	/** Size of disk */	
	public final static int DISK_SIZE = 2048;

	/** Size of RAM */	
	public final static int RAM_SIZE = 1024;

	/** Number of registers */
	public final static int NUM_REGISTERS = 16;

	/** Status enum */
	public enum Status {
		/** New process */
		NEW,
		/** Running process */
		RUNNING,
		/** Waiting */
		WAITING,
		/** Ready */
		READY,
		/** Finished process */
		TERMINATED};

	public static void main(String[] args) {

		Disk myDrive;
		Loader myLoader;
		
		if(MESSAGES) {
			System.out.println("Instantiating Disk...");
		}	
			
		myDrive = new Disk();
		
		if(myDrive!=null && MESSAGES) {		
			System.out.println("Disk created!");
		}
		else if(MESSAGES)
			System.out.println("Failure!");
			
		if(MESSAGES) 	
			System.out.println("Loading processes into Disk...");

		myLoader = new Loader();

		if(MESSAGES) {			
			if(myLoader!=null)
				System.out.println("Processes loaded!");
			else
				System.out.println("Failure!");
			ProcessQueue unReadyQueue = myLoader.load(myDrive);
			if(DEBUG)
			unReadyQueue.print();
		}

		//RAM myRAM = new RAM();

		if(DEBUG) {	
			;//System.out.println("Disk:"+myDrive.read(0));
		}

		CPU myCPU = new CPU();
		int count = 0 ;
		do {
			if(DEBUG)
				;//System.out.println("Instruction#:"+count);		
			String temp = myCPU.fetch(myDrive);
			
			if(DEBUG)
				;//System.out.println("Instruction:"+temp);	
	
			String machineCode = myCPU.decode(temp);
			
			if(DEBUG)
				;//System.out.println("machineCode:"+machineCode);		
				
		
			myCPU.execute(machineCode);
				
			++count;
							
		} while(myCPU.getStatus() != Driver.Status.TERMINATED && myCPU.getPc() < RAM_SIZE);//&& count < 1000);
		
		if(DEBUG) {	
			//System.out.println(myDrive.toString());
			//System.out.println(myDrive.toWideString());
			//System.out.println("22:"+myDrive.read(22));		
			myDrive.erase();
			//System.out.println(myDrive.toString());	
		}
	}
}